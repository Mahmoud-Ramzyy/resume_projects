library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity dividertb is
end dividertb;

architecture tb of dividertb is
 component divider
port(
divident:in std_logic_vector(3 downto 0);
divisor:in std_logic_vector(3 downto 0);
Q:out std_logic_vector(3 downto 0);
R:out std_logic_vector(3 downto 0));
end component;
 
signal divident: std_logic_vector(3 downto 0):= (others=>'0');
signal divisor: std_logic_vector(3 downto 0) := (others=>'0');
signal Q: std_logic_vector(3 downto 0) := (others=>'0');
signal R: std_logic_vector(3 downto 0) := (others=>'0');


BEGIN

uut:divider port map(divident,divisor,Q,R);

PROCESS
 begin
wait for 100 ns;
divident<="0000";
divisor<="0010";
wait for 100 ns;
divident<="0110";
divisor<="0101";
wait for 100 ns;
divident<="0100";
divisor<="0011";
wait for 100 ns;
divident<="1110";
divisor<="0011";
wait for 100 ns;
divident<="1111";
divisor<="0101";
wait for 100 ns;
divident<="1100";
divisor<="1001";
wait for 100 ns;
divident<="1000";
divisor<="0011";
wait for 100 ns;
divident<="0010";
divisor<="0001";
wait for 100 ns;
divident<="0100";
divisor<="0011";

wait for 100 ns;
divident<="1111";
divisor<="0010";
wait for 100 ns;
divident<="1111";
divisor<="0101";
wait for 100 ns;
divident<="1111";
divisor<="0011";
wait for 100 ns;
divident<="1111";
divisor<="0111";
wait for 100 ns;
divident<="1101";
divisor<="0101";
wait for 100 ns;
divident<="1110";
divisor<="1001";
wait for 100 ns;
divident<="1011";
divisor<="0011";
wait for 100 ns;
divident<="0010";
divisor<="0111";
wait for 100 ns;
divident<="0110";
divisor<="0111";
wait;
end process;
end  tb;
